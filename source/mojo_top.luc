global Color {
    // BGR
    const RED = h00DD00;
    const GREEN = h0000DD;
    const BLUE = hDD0000;
    const YELLOW = h00CCCC;
    const WHITE = h888888;
    const BLACK = h000000;
}

module mojo_top (
        input clk,                  // 50MHz clock
        // input rst_n,
        output led [8],             // 8 user controllable LEDs
        output spi_miso,            // AVR SPI MISO
        output spi_channel [4],     // AVR general purpose pins (used by default to select ADC channel)
        output avr_rx,              // AVR RX (FPGA TX)
        output led_data[11],
        input big_red_button
    ) {
  
    sig rst;    // reset signal
    sig button;
    rom_screen_idle rom_screen_idle;
    rom_screen_lose rom_screen_lose;
    rom_screen_win win_screen;
    
    // led_matrix and init_blk are hardcoded, 
    // need to change if these constants change
    const COLUMNS = 5;
    const ROWS = 11;
    
    .clk(clk) {
        reset_conditioner reset_cond;
        button_conditioner button_cond;
        
        fsm game_state = {IDLE, STAGE1, TRANSITION, STAGE2, LOSE, WIN, END, RESET};
        dff reset;
        dff start;
        dff next_level;
        dff timer[28];
        dff color[24];
        dff led_matrix_temp[ROWS][COLUMNS];
        .rst(rst) {
            control_man_stage1 ctl_man1(#COLUMNS(COLUMNS), #ROWS(ROWS), .button(button));
            led_matrix led_matrix(#COLUMNS(COLUMNS), #ROWS(ROWS)); 
        }
    }
    
    always {
        reset_cond.in = reset.q;
        rst = reset_cond.out;
        
        button_cond.in = big_red_button;
        button = button_cond.out;
    
        led = 8h00;                 // turn LEDs off
        spi_miso = bz;              // not using SPI
        spi_channel = bzzzz;        // not using flags
        avr_rx = bz;                // not using serial port
    
        ctl_man1.start = start.q;
        ctl_man1.next_level = next_level.q;
    
        led_matrix.color = color.q;
        led_matrix.matrix = led_matrix_temp.q;
        led_data = led_matrix.led_data;
    
        case(game_state.q) {
            // idle screen
            game_state.IDLE:
                reset.d = b0;
                color.d = Color.YELLOW;
                led_matrix_temp.d = rom_screen_idle.out;
                if (button) {
                    start.d = b1;
                    game_state.d = game_state.STAGE1;
                }
            
            // stage 1: normal
            game_state.STAGE1:
                color.d = Color.GREEN;
                next_level.d = b0;
                led_matrix_temp.d = ctl_man1.matrix;
                if (ctl_man1.level_end == 1) {
                    game_state.d = game_state.TRANSITION;
                } else if (ctl_man1.level_end == 2) {
                    game_state.d = game_state.LOSE;
                }
        
            // transition to reset the control man and controls
            game_state.TRANSITION:
                reset.d = b1;
                timer.d = timer.q + 1;
                if (timer.q[24] == b1) {
                    timer.d = b0;
                    reset.d = b0;
                    next_level.d = b1;
                    start.d = b1;
                    game_state.d = game_state.STAGE2;
                }
                
            // stage 2: disappearing traces
            game_state.STAGE2:
                color.d = Color.BLUE;
                next_level.d = b1;
                led_matrix_temp.d = ctl_man1.matrix;
                if (ctl_man1.level_end == 1) {
                    game_state.d = game_state.WIN;
                } else if (ctl_man1.level_end == 2) {
                    game_state.d = game_state.LOSE;
                }
        
            // lose screen
            game_state.LOSE:
                color.d = Color.RED;
                next_level.d = b0;
                start.d = b0;
                led_matrix_temp.d = rom_screen_lose.out;
                timer.d = timer.q + 1;
                if (timer.q[24] == b1) {
                    timer.d = b0;
                    game_state.d = game_state.END;
                }
        
            // win screen
            game_state.WIN:
                color.d = Color.RED;
                next_level.d = b0;
                start.d = b0;
                led_matrix_temp.d = win_screen.out;
                timer.d = timer.q + 1;
                if (timer.q[24] == b1) {
                    timer.d = b0;
                    game_state.d = game_state.END;
                }
            
            // wait for user input to go back IDLE
            // alternatively go back after some time   
            game_state.END:
                color.d = Color.RED;
                led_matrix_temp.d = led_matrix_temp.q;
                timer.d = timer.q + 1;
                if (button || timer.q[27] == b1) {
                    timer.d = b0;
                    game_state.d = game_state.RESET;
                }
        
            // reset the game
            game_state.RESET:
                reset.d = b1;
                timer.d = timer.q + 1;
                if (timer.q[24] == b1) {
                    timer.d = b0;
                    reset.d = b0;
                    next_level.d = b0;
                    start.d = b0;
                    game_state.d = game_state.IDLE;
                } 
        }  
    }
}